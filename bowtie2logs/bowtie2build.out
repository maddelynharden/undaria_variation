/var/spool/slurm/d/job705830/slurm_script: line 8: activate: No such file or directory
Settings:
  Output files: "Kr2015_Undaria.pinnatifida_superscaffolds.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  undaria_kr2015/Kr2015_Undaria.pinnatifida_superscaffolds.fasta
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:08
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:06
bmax according to bmaxDivN setting: 158539644
Using parameters --bmax 118904733 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 118904733 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:16
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:03
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:06
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 9.05941e+07 (target: 118904732)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (118904733) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 71952574 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:32
Returning block of 71952575 for bucket 1
Getting block 2 of 7
  Reserving size (118904733) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 104833514 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:51
Returning block of 104833515 for bucket 2
Getting block 3 of 7
  Reserving size (118904733) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 47391746 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:21
Returning block of 47391747 for bucket 3
Getting block 4 of 7
  Reserving size (118904733) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 118176816 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:59
Returning block of 118176817 for bucket 4
Getting block 5 of 7
  Reserving size (118904733) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 107106037 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:54
Returning block of 107106038 for bucket 5
Getting block 6 of 7
  Reserving size (118904733) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 97646544 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:47
Returning block of 97646545 for bucket 6
Getting block 7 of 7
  Reserving size (118904733) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 87051342 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:40
Returning block of 87051343 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 158427271
fchr[G]: 317038974
fchr[T]: 475612874
fchr[$]: 634158579
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 215627532 bytes to primary EBWT file: Kr2015_Undaria.pinnatifida_superscaffolds.1.bt2
Wrote 158539652 bytes to secondary EBWT file: Kr2015_Undaria.pinnatifida_superscaffolds.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 634158579
    bwtLen: 634158580
    sz: 158539645
    bwtSz: 158539645
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 39634912
    offsSz: 158539648
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3302910
    numLines: 3302910
    ebwtTotLen: 211386240
    ebwtTotSz: 211386240
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:08:35
Reading reference sizes
  Time reading reference sizes: 00:00:06
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:07
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 158539644
Using parameters --bmax 118904733 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 118904733 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:14
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:04
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:06
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 2; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 9.05941e+07 (target: 118904732)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (118904733) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 81266822 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:37
Returning block of 81266823 for bucket 1
Getting block 2 of 7
  Reserving size (118904733) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 111277325 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:53
Returning block of 111277326 for bucket 2
Getting block 3 of 7
  Reserving size (118904733) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 100061419 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:49
Returning block of 100061420 for bucket 3
Getting block 4 of 7
  Reserving size (118904733) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 66964750 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:31
Returning block of 66964751 for bucket 4
Getting block 5 of 7
  Reserving size (118904733) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 115812450 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:57
Returning block of 115812451 for bucket 5
Getting block 6 of 7
  Reserving size (118904733) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 109574317 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:52
Returning block of 109574318 for bucket 6
Getting block 7 of 7
  Reserving size (118904733) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 49201490 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:22
Returning block of 49201491 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 158427271
fchr[G]: 317038974
fchr[T]: 475612874
fchr[$]: 634158579
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 215627532 bytes to primary EBWT file: Kr2015_Undaria.pinnatifida_superscaffolds.rev.1.bt2
Wrote 158539652 bytes to secondary EBWT file: Kr2015_Undaria.pinnatifida_superscaffolds.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 634158579
    bwtLen: 634158580
    sz: 158539645
    bwtSz: 158539645
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 39634912
    offsSz: 158539648
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 3302910
    numLines: 3302910
    ebwtTotLen: 211386240
    ebwtTotSz: 211386240
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:09:42
